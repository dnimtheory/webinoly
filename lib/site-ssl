#!/bin/bash

# This is a library for Site Manager Plugin
# Functions for SSL On/Off

source /opt/webinoly/lib/general

ssl_nginx() {
	sudo sed -i '/listen 80/c \	listen 443 ssl http2;' /etc/nginx/sites-available/$domain
	sudo sed -i '/listen \[::\]:80/c \	listen [::]:443 ssl http2;' /etc/nginx/sites-available/$domain
	sudo sed -i '/headers-http.conf/a \	include common/headers-https.conf;' /etc/nginx/sites-available/$domain
	sudo sed -i '/server_name /r /opt/webinoly/templates/template-site-ssl' /etc/nginx/sites-available/$domain
	
	[[ -n $add_to_wildcard ]] && cert=$add_to_wildcard || cert=$domain
	sudo sed -i "/WebinolySSLstart/,/WebinolySSLend/{s/domain.com/$cert/}" /etc/nginx/sites-available/$domain
	
	# Custom SSL files
	if [[ -n $ssl_crt && -n $ssl_key ]]; then
		sudo sed -i '/WebinolySSLstart/a \	# WebinolySSLCustomCert' /etc/nginx/sites-available/$domain
		sudo sed -i "/fullchain.pem/c \	ssl_certificate $ssl_crt;" /etc/nginx/sites-available/$domain
		sudo sed -i "/privkey.pem/c \	ssl_certificate_key $ssl_key;" /etc/nginx/sites-available/$domain
		
		sudo chmod 777 $ssl_crt
		sudo chmod 777 $ssl_key
		sudo chmod 755 $(dirname -- $ssl_crt)
		sudo chmod 755 $(dirname -- $ssl_key)
		sudo chown -R root:root $(dirname -- $ssl_crt)
		if [[ -n $ssl_ocsp && -a $ssl_ocsp ]]; then
			sudo sed -i "/ssl_trusted_certificate/c \	ssl_trusted_certificate $ssl_ocsp;" /etc/nginx/sites-available/$domain
			sudo chmod 777 $ssl_ocsp
			sudo chmod 755 $(dirname -- $ssl_ocsp)
		else
			sudo sed -i '/WebinolySSLstart/,/WebinolySSLend/{/ssl_stapling/d}' /etc/nginx/sites-available/$domain
			sudo sed -i '/WebinolySSLstart/,/WebinolySSLend/{/ssl_trusted_certificate/d}' /etc/nginx/sites-available/$domain
		fi
	fi

	# HTTP to HTTPS Redirection
	[[ $subdomflag == 1 ]] && local sername="server_name $domain;" || local sername="server_name $domain www.$domain;"
	[[ -n $wildcard ]] && sername="server_name $domain *.$domain;"
	sudo sed -i '1r /opt/webinoly/templates/template-site-sslredirect' /etc/nginx/sites-available/$domain
	sudo sed -i "/#server_name;/c \	$sername" /etc/nginx/sites-available/$domain

	# In case this domain is used as tools-site or default-site
	[[ $(conf_read tools-site) == $domain ]] && sudo webinoly -tools-site=$domain
	[[ $(conf_read default-site) == $domain ]] && sudo webinoly -default-site=$domain
}


site_ssl_on() {
	local cermail=$(conf_read mail)
	local path=$domain
	
	# Some validations to prevent errors when creating certs.
	if [[ -n $root && -a /etc/nginx/sites-available/$root ]]; then
		path=$root
	elif [[ -n $root && ! -a /etc/nginx/sites-available/$root ]]; then
		echo "${red}[ERROR] Root path domain is not a valid domain or is not found/hosted in this server!${end}"
		exit 1
	fi
	
	if [[ ! -d /var/www/$path/htdocs && -z $root_path ]]; then
		echo "${red}[ERROR] Seems like you are trying to request an SSL Certificate for a Parked/Mapped Domain."
		echo "Please, use the '-root=domain.com' parameter to specify the main domain."
		echo ""
		echo "If your site is using the Reverse Proxy configuration, please use the '-root-path=/opt/app' option.${end}"
		exit 1
	elif [[ -n $root_path && ! -d $root_path ]]; then
		echo "${red}[ERROR] Invalid root path!${end}"
		exit 1
	fi
	
	if [[ ! -a /etc/letsencrypt/live/$domain/fullchain.pem && $ssl == "force-renewal" ]]; then
		echo "${red}[ERROR] Cert you're trying to renew not found!${end}"
		exit 1
	fi
	
	# Check if Letsencrypt is installed
	if [[ $(conf_read nginx-tool) != "true" || ! -a /usr/bin/letsencrypt ]]; then
		echo "${red}[ERROR] Seems like Let's Encrypt tool is not installed!${end}"
		exit 1
	fi

	echo "${gre}"
	echo "*************************************************************************************************"
	echo "**  Please, be careful with the number of intents or certificates you try to get.              **"
	echo "**  Letâ€™s Encrypt provides rate limits to ensure fair usage by as many people as possible.     **"
	echo "**                                                                                             **"
	echo "**  If you are getting errors or having issues when trying to get a new certificate            **"
	echo "**  read about the Let's Encrypt rate limit - https://letsencrypt.org/docs/rate-limits/        **"
	echo "*************************************************************************************************"
	echo "${end}"
	[[ $subdomflag == 0 ]] && echo "${blu}Please, be sure that${end} $domain ${blu}and${end} www.$domain ${blu}are both currently pointing (DNS) to this server. ${end}"
	[[ $subdomflag == 1 ]] && echo "${blu}Please, be sure that the${end} $domain ${blu}subdomain is currently pointing (DNS) to this server. ${end}"
	
	# We need an email to notify each renew intent (cron)
	while [[ -z $cermail ]]
	do
		echo "${blu}"
		read -p "Please, enter an email to register your new certificate: ${end}" cermail
		if [[ "$cermail" =~ ^[a-z0-9_\+-]+(\.[a-z0-9_\+-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,4})$ ]]; then
			conf_write mail $cermail
			echo "${gre}Email address has been successfuly validated and saved! ${end}"
		else
			cermail=""
			echo "${red}Please enter a valid email address!"
		fi
		echo "${end}"
	done
	
	# Create new certificate
	local param="--email $cermail --no-eff-email --agree-tos --staple-ocsp --must-staple"
	[[ $(conf_read debug) == "true" ]] && param="$param --test-cert"
	[[ $ssl == "force-renewal" ]] && param="$param --force-renewal"
	[[ $subdomflag == 1 ]] && local domset="-d $domain" || local domset="-d $domain -d www.$domain"
	
	# Wildcard
	if [[ ( ! -a /etc/letsencrypt/live/$domain/fullchain.pem || $ssl == "force-renewal" ) && -n $wildcard ]]; then
		sudo certbot certonly --manual --preferred-challenges=dns --manual-public-ip-logging-ok -d $domain -d *.$domain $param
	
	# Manual mode for Reverse Proxy sites
	elif [[ ( ! -a /etc/letsencrypt/live/$domain/fullchain.pem || $ssl == "force-renewal" ) && -n $root_path ]]; then
		conf_write temp-path $root_path
		sudo certbot certonly --manual --preferred-challenges=http --manual-auth-hook /opt/webinoly/lib/ex-ssl-authentication --manual-cleanup-hook /opt/webinoly/lib/ex-ssl-cleanup --manual-public-ip-logging-ok $domset $param
		conf_delete temp-path
	
	# Single cert
	elif [[ ! -a /etc/letsencrypt/live/$domain/fullchain.pem || $ssl == "force-renewal" ]]; then
		sudo certbot certonly --webroot -w /var/www/$path/htdocs/ $domset $param
	
	elif [[ -a /etc/letsencrypt/live/$domain/fullchain.pem ]]; then
		echo "${blu}Certificate for${end} $domain ${blu}already exist and found, wait while we configure your server to use it!${end}"
	fi
	
	
	# SSL Nginx Conf
	if [[ -a /etc/letsencrypt/live/$domain/fullchain.pem && $ssl != "force-renewal" ]]; then
		ssl_nginx

		# Auto-Renew Certificate
		if [[ ! -a /var/spool/cron/crontabs/root ]]; then
			sudo touch /var/spool/cron/crontabs/root
			sudo chmod 600 /var/spool/cron/crontabs/root
			sudo chown root:crontab /var/spool/cron/crontabs/root
		fi
		
		cronmail=$( sudo grep -F "MAILTO=" /var/spool/cron/crontabs/root )
		cronrene=$( sudo grep -F "certbot renew" /var/spool/cron/crontabs/root )
		[[ -z $cronmail && -n $cermail && -z $cronrene ]] && echo "MAILTO=${cermail}" | sudo tee -a /var/spool/cron/crontabs/root > /dev/null
		[[ -z $cronrene ]] && echo '15 3 * * 7 certbot renew --post-hook "service nginx restart"' | sudo tee -a /var/spool/cron/crontabs/root > /dev/null
		
		echo "${gre}SSL have been successfully enabled for your site -${blu} $domain${end}"
	elif [[ -a /etc/letsencrypt/live/$domain/fullchain.pem && $ssl == "force-renewal" ]]; then
		echo "${gre}SSL Cert ${blu}- $domain$ - ${gre}has been Forced to Renew!${end}"
	elif [[ ! -a /etc/letsencrypt/live/$domain/fullchain.pem ]]; then
		echo "${red}"
		echo "[ERROR] Unable to create the new certificate!"
		echo "${end}"
		exit 1
	fi
	[[ $(conf_read debug) == "true" ]] && echo "${red}Debug Mode is enabled, this SSL Cert is just for testing purpose and should not be used in production enviroments.${end}"
}


ssl_revoke() {
	[[ $(conf_read debug) == "true" ]] && local param="--test-cert" || local param=""
	sudo certbot revoke --cert-path /etc/letsencrypt/live/$domain/cert.pem --delete-after-revoke $param
	echo "${gre}"
	echo "SSL Cert for your site${blu} $domain ${gre}has been completely removed and revoked!${end}"
}

site_ssl_off() {
	# Don't ask if SSL is Custom
	[[ -n $(sed -n -e '/WebinolyNginxServerStart/,$p' /etc/nginx/sites-available/$domain | grep -F "WebinolySSLCustomCert") ]] && revoke="off"
	
	sudo sed -i '/listen 443/c \	listen 80;' /etc/nginx/sites-available/$domain
	sudo sed -i '/listen \[::\]:443/c \	listen [::]:80;' /etc/nginx/sites-available/$domain
	sudo sed -i '/headers-https.conf/d' /etc/nginx/sites-available/$domain
	sudo sed -i '/WebinolySSLstart/,/WebinolySSLend/{/.*/d}' /etc/nginx/sites-available/$domain
	sudo sed -i '/WebinolySSLredirectStart/,/WebinolySSLredirectEnd/{/.*/d}' /etc/nginx/sites-available/$domain
	
	# In case this domain is used as tools-site or default-site
	[[ $(conf_read tools-site) == $domain ]] && sudo webinoly -tools-site=$domain
	[[ $(conf_read default-site) == $domain ]] && sudo webinoly -default-site=$domain
	
	if [[ -n $revoke && $revoke =~ ^(on|off)$ ]]; then
		[[ $revoke == "on" ]] && answer="Y" || answer="N"
	else
		echo "${blu}Select 'Y' to revoke and delete all the certificate files."
		echo "Select 'N' if you only want to deactivate this certificate momentary and you will activate it later again."
		echo "${gre}"
		echo "Do you want to delete and revoke this certificate [y/N]? "
		while read -r -n 1 -s answer; do
		  answer=${answer:-n}
		  [[ $answer = [YyNn] ]] && break
		done
		echo "${end}"
	fi
	[[ $answer == [Yy] ]] && ssl_revoke
	echo "${gre}SSL has been successfully disabled for your site -${blu} $domain${end}"
}
