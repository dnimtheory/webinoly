#!/bin/bash

readonly app_version="1.8.1"
readonly svr_version="1.3"
readonly os_ubuntu_supported=(xenial bionic)
readonly php_supported=(7.1 7.2 7.3)

# echo colors
readonly red=`tput setaf 1`
readonly gre=`tput setaf 2`
readonly blu=`tput setaf 6`
readonly end=`tput sgr0`



check_ubuntu_release() {
	local check="false"
	for val in "${os_ubuntu_supported[@]}"
	do 
		[[ $val == $1 ]] && check="true"
	done
	echo $check
}
check_php_version() {
	local check="false"
	for val in "${php_supported[@]}"
	do 
		[[ $val == $1 ]] && check="true"
	done
	echo $check
}

check_osname() {
	local distr=`echo $(lsb_release -i | cut -d':' -f 2)`
	local osver=`echo $(lsb_release -c | cut -d':' -f 2)`
	if ! [[ $distr == "Ubuntu" && $(check_ubuntu_release $osver) == "true" ]]; then
		echo "${red}" >&2
		echo "****************************************************************************" >&2
		echo "****  This OS is not supported by Webinoly and could not work properly  ****" >&2
		echo "****************************************************************************" >&2
		echo "${end}" >&2
	fi
	echo $osver
}


check_for_nginx() {
	if [[ $(conf_read nginx) != "true" ]]; then
		echo "${red}[ERROR] NGINX is required and not found! ${end}"
		exit 1
	fi
}
check_for_php() {
	if [[ $(conf_read php) != "true" ]]; then
		echo "${red}[ERROR] PHP is required and not found! ${end}"
		exit 1
	fi
}
check_for_mysql() {
	if [[ $(conf_read mysql) != "true" ]]; then
		echo "${red}[ERROR] MySQL is required and not found! ${end}"
		exit 1
	fi
}


conf_read() {
	if [[ ! -a /opt/webinoly/webinoly.conf ]]; then
		echo "${red}[ERROR] Config file not found!${end}"
		exit 1
	fi
	
	local val=$(grep -w "^${1}:.*" /opt/webinoly/webinoly.conf | cut -f 2 -d ':')
	echo $val
}

conf_delete() {
	if [[ ! -a /opt/webinoly/webinoly.conf ]]; then
		echo "${red}[ERROR] Config file not found!${end}"
		exit 1
	fi
	
	sed -i "/^${1}:/d" /opt/webinoly/webinoly.conf
}

conf_write() {
	[[ ! -a /opt/webinoly/webinoly.conf ]] && sudo touch /opt/webinoly/webinoly.conf
	conf_delete $1
	echo "$1:$2" >> /opt/webinoly/webinoly.conf
}


db_delete() {
	local domain="$1"
	
	# Get dbname and dbuser of a WP site
	if [[ -a /var/www/$domain/wp-config.php ]]; then
		wpconfpath="/var/www/$domain/wp-config.php"
	elif [[ -a /var/www/$domain/htdocs/wp-config.php ]]; then
		wpconfpath="/var/www/$domain/htdocs/wp-config.php"
	else
		return
	fi
	
	local name=$( grep -F "DB_NAME" $wpconfpath | cut -f 4 -d "'" )
	local user=$( grep -F "DB_USER" $wpconfpath | cut -f 4 -d "'" )
	local host=$( grep -F "DB_HOST" $wpconfpath | cut -f 4 -d "'" )
	local url=$(echo "$host" | cut -f 1 -d ':')
	local port=$(echo "$host" | cut -f 2 -d ':')
	local done="0"
	
	dbsetup="DELETE FROM mysql.user WHERE User='$user';DROP DATABASE IF EXISTS $name;DELETE FROM mysql.db WHERE Db='$name' OR Db='$name\\_%';FLUSH PRIVILEGES;"
	while [[ $done != "1" ]]
	do
		done="1"
		if [[ $host == "localhost" ]]; then
			# Check if MySQL installed
			if [[ ! -d /etc/mysql || $(conf_read mysql) != "true" || $(conf_read mysql-client) != "true" ]]; then
				echo "${red}[ERROR] Seems like MySQL is not installed or Webinoly can not detect it!"
				echo " - Database can not be deleted -${blu} $domain ${end}"
				return
			fi
			local ROOT_PASS=$( echo $(conf_read mysql-root) | openssl enc -d -a -salt )
			sudo mysql --connect-timeout=10 --user=root -p$ROOT_PASS -e "$dbsetup"
			if [ $? != "0" ]; then
				done="0"
				echo "${red}============================================"
				echo "    [Error]: Database delete failed."
				echo "============================================"
				echo ""
				echo "${blu}  Retry [Y/n]? "
				while read -r -n 1 -s answer; do
					answer=${answer:-y}
					[[ $answer = [YyNn] ]] && break
				done
				[[ $answer  == [Nn] ]] && done="1"
			else
				echo "${gre}Database of your site ${blu}${domain}${gre} has been successfully deleted! ${end}"
			fi
		else
			if [[ -n $external_db ]]; then
				dbdata=${external_db:1:-1}
				uroot=$(echo "${dbdata}" | cut -d',' -f 1 -s)
				proot=$(echo "${dbdata}" | cut -d',' -f 2 -s)
				if [[ $(echo "${external_db}" | cut -c-1) != "[" || $(echo "${external_db}" | rev | cut -c-1) != "]" || -z $uroot || -z $proot ]]; then
					echo "${red}[ERROR] Invalid data for External Database!${end}"
					exit 1
				fi
			fi
			if [[ -z $uroot || -z $proot ]]; then
				echo ""
				echo "${gre}External DB found in${blu} $domain ${gre}(Press 'Enter' key twice to skip and not delete)"
				read -p "${blu}External DB root username [root]: " uroot
				uroot=${uroot:-root}
				read -p "External DB root password: " proot
			fi
			if [[ $uroot == "root" && -z $proot ]]; then
				echo "${red}Action aborted, database not deleted!"
				continue 1;
			else
				if [[ $(conf_read mysql-client) != "true" ]]; then
					echo "${gre}MySQL Client is not installed and we need it to stablish a connection with your Database."
					echo "Wait while we install MySQL Client... installing!!!${end}"
					mysql_client_install > /dev/null 2>&1 &
					echo "${gre}MySQL Client has been successfully installed!${end}"
				fi
				
				sudo mysql --connect-timeout=10 -h "$url" -P "$port" -u"$uroot" -p"$proot" -e "$dbsetup"
				if [ $? != "0" ]; then
					done="0"
					echo "${red}============================================"
					echo "    [Error]: Database delete failed."
					echo "============================================"
					echo ""
					echo "${blu}  Retry [Y/n]? "
					while read -r -n 1 -s answer; do
						answer=${answer:-y}
						[[ $answer = [YyNn] ]] && break
					done
					[[ $answer  == [Nn] ]] && done="1"
				else
					echo "${gre}Database of your site ${blu}${domain}${gre} has been successfully deleted! ${end}"
				fi
			fi
			echo "${end}"
		fi
	done
	
}


pre_install() {
	sudo apt -qq update
	if [[ $(conf_read pre-packs) != true ]]; then
		# Check for missing essential packages
		api-events_update i1
		sudo apt -y -qq install dialog
		sudo apt -y -qq install software-properties-common
		[[ $(check_osname) != "bionic" ]] && sudo apt -y -qq install python-software-properties
		sudo apt -y -qq install pwgen
		sudo apt -y -qq install unzip
		sudo apt -y -qq install zip
		conf_write pre-packs true
		api-events_update i2
	fi
}


mysql_client_install() {
	api-events_update im2
	local osname=$(check_osname)
	# Cases with MariaDB v10.3 support - https://downloads.mariadb.org/mariadb/repositories/
	case "$osname" in
		"xenial")
			sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
			sudo add-apt-repository "deb [arch=amd64,arm64,i386,ppc64el] http://mirrors.syringanetworks.net/mariadb/repo/10.3/ubuntu $osname main"
		;;
		"bionic")
			sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
			sudo add-apt-repository "deb [arch=amd64,arm64,ppc64el] http://mirrors.syringanetworks.net/mariadb/repo/10.3/ubuntu $osname main"
		;;
		"cosmic"|"disco")
			sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
			sudo add-apt-repository "deb [arch=amd64] http://mirrors.syringanetworks.net/mariadb/repo/10.3/ubuntu $osname main"
		;;
	esac
	pre_install
	sudo apt -y install mariadb-client
	conf_write mysql-client true
	echo "${gre}MySQL Client has been successfully installed!${end}"
	api-events_update im3
}


tools_port() {
	local in="$1"
	while ! [[ $port -ge 0 && $port -le 65535 && $port =~ ^[0-9]+$ ]] 2>/dev/null
	do
		if [[ -z "$in" || $in == "empty" ]]; then
			read -p "${blu}Tools Port [Default: 22222]: " port
			port=${port:-22222}
		else
			port="$in"
			in="empty"
		fi
	done
	conf_write tools-port $port
	echo "${gre}Port $port has been enabled to access all your Tools! ${end}"
}


api-events_update() {
	conf_write status-api $1
	if [[ -a /opt/webinoly/lib/api-events ]]; then
		source /opt/webinoly/lib/api-events
		api-events_catch_status $1
	fi
}


check_for_parameters() {
	# Check for domain parameter if is first parameter and have no hyphen at the begining.
	if [[ -n $1 && $(echo $1 | cut -c-1) != "-"  ]]; then
		domain=$1
		shift
	fi
	
	for arg in $@; do
		local check=$(echo "${arg}" | cut -c-1)
		local arg=${arg:1}
		local par=$(echo "${arg}" | cut -d'=' -f 1 -s)
		local val=$(echo "${arg}" | cut -d'=' -f 2 -s)
		[[ -z $par ]] && par=$arg
		[[ -z $val && $par == "conf-value_"* ]] && val="NeverMatchString" #Special value to allow the string "true" as a valid value.
		[[ -z $val ]] && val=true
		
		# Check for Webinoly -conf-value_
		if [[ $par == "conf-value_"* ]]; then
			dyn_var=$(echo "${par}" | cut -d'_' -f 2 -s)
			par=$(echo "${par}" | cut -d'_' -f 1 -s)
		fi
		
		# Convert to lowercase and support for hyphen in arguments.
		par=${par,,}
		par=$(echo $par | sed "s/-/_/g")
		
		# Only valid variables names and check for begin with hyphen.
		if [[ $check == "-" && $par =~ ^[a-zA-Z_][a-zA-Z_0-9]*$ ]]; then
			[[ -n $par ]] && eval $par=\$val
		else
			echo "${red}[ERROR] Invalid parameters! ${end}"
			exit 1
		fi
	done
}


ip_check() {
	# Check for valid IPv4 and IPv6 values, including CIDR.
	if [[ -n $1 && $1 =~ ^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/([0-9]|[1-2][0-9]|3[0-2]))?$ || $1 =~ ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(\/([0-9]|[1-9][0-9]|1[0-2][0-8]))?$ ]]; then
		echo "true"
	else
		echo "false"
	fi
}
