#!/bin/bash

# Site Manager Plugin (Create, delete and de/activate)
# Syntax: site <domain> <option> <argument>
# Options: -html, -php, -mysql, -wp, -wpsubdir, -wpsubdom, -parked, -proxy, -on, -off, -delete, -delete-all, -list, -cache, -ssl, -force-redirect
# Arguments: -cache, -root, -root-path, -subdomain, -ignore-ssl, -wildcard, -raw, -external-db, -revoke, -ssl-crt, -ssl-key, -ssl-ocsp

# shopt is necessary for this kind !(html|22222) of patterns
shopt -s extglob

source /opt/webinoly/lib/sites
check_for_parameters $@
api-events_update sis
check_for_nginx -ask


# Check if site is sub-domain
if [[ -n $domain ]]; then
	count=1
	while true; do
		tld=$(echo "${domain}" | rev | cut -d'.' -f -$count -s | rev)
		if ! grep -Fxq "$tld" /opt/webinoly/lib/public_suffix_list.dat; then
			break
		fi
		count=$[$count+1]
	done
	[[ -n $(echo "$(echo "${domain}" | rev | cut -d'.' -f $count- -s | rev)" | cut -d'.' -f 2 -s) || $count == 1 ]] && subdomflag="1" || subdomflag="0"
fi
# Get variables with sub-domain info
if [[ $subdomflag == 1 ]]; then
	main_domain=$(echo "${domain}" | rev | cut -d'.' -f -$count -s | rev)
	sub_domain=$(echo "${domain}" | rev | cut -d'.' -f $[$count+1]- -s | rev)
fi
# Overwrite value if defined by user
[[ $subdomain == "true" ]] && subdomflag="1"
[[ $subdomain == "false" ]] && subdomflag="0"


# Evaluate if site to create is WP ( 0 = noWP, 1 = WP ask, 2 = WP default, 3 = WP unattended, 4 = MySQL default, 5 = MySQL unattended )
type="0"
if [[ -n $wp || -n $wpsubdir || -n $wpsubdom || -n $mysql ]]; then
	[[ -n $mysql ]] && type="4" || type="2"

	# For legacy support
	[[ $wp == "default"  ]] && wp=true
	[[ $wpsubdir == "default"  ]] && wpsubdir=true
	[[ $wpsubdom == "default"  ]] && wpsubdom=true
	[[ $mysql == "default"  ]] && mysql=true

	if [[ ( -n $wp && $wp != true ) || ( -n $wpsubdir && $wpsubdir != true ) || ( -n $wpsubdom && $wpsubdom != true ) || ( -n $mysql && $mysql != true ) ]]; then
		if [[ $wp == "custom" || $wpsubdir == "custom" || $wpsubdom == "custom" || $mysql == "custom" ]]; then
			[[ -n $mysql ]] && type="0" || type="1"
		else
			[[ -n $wp && $wp != true  ]] && value=$wp
			[[ -n $wpsubdir && $wpsubdir != true  ]] && value=$wpsubdir
			[[ -n $wpsubdom && $wpsubdom != true  ]] && value=$wpsubdom
			[[ -n $mysql && $mysql != true  ]] && value=$mysql
			
			# -wp=[setupmysql,setupwp,dbhost,dbname,dbuser,dbpass,dbpref,extdbuser,extdbpass]
			custombegin=$(echo "${value}" | cut -c-1)
			customlast=$(echo "${value}" | rev | cut -c-1)
			if [[ $custombegin == "[" && $customlast == "]" || $mysql == true ]]; then
				wpdata=${value:1:-1}
			else
				echo "${red}[ERROR] Please enter a valid custom value!${end}"
				exit 1
			fi
			
			# Because MySQL format not have this parameters at the beggining to match WP format. Insert it!
			if [[ -n $mysql && $mysql != true ]]; then
				wpdata=${wpdata/#/true,false,}
				# Insert wp_prefix if external db data is found.
				extdata=$(echo "${wpdata,,}" | cut -d',' -f 7- -s)
				if [[ -n $extdata ]]; then
					wpdata=$(echo "${wpdata,,}" | cut -d',' -f -6 -s)
					wpdata=${wpdata/%/,false,}
					wpdata=${wpdata/%/$extdata}
				fi
			fi
			
			# Double coma is for lower case convertion
			setmsqcustom=$(echo "${wpdata,,}" | cut -d',' -f 1 -s)
			setpwpcustom=$(echo "${wpdata,,}" | cut -d',' -f 2 -s)
			
			dbhostcustom=$(echo "${wpdata}" | cut -d',' -f 3 -s)
			dbnamecustom=$(echo "${wpdata}" | cut -d',' -f 4 -s)
			dbusercustom=$(echo "${wpdata}" | cut -d',' -f 5 -s)
			dbpasscustom=$(echo "${wpdata}" | cut -d',' -f 6 -s)
			dbprefcustom=$(echo "${wpdata}" | cut -d',' -f 7 -s)
			exusercustom=$(echo "${wpdata}" | cut -d',' -f 8 -s)
			expasscustom=$(echo "${wpdata}" | cut -d',' -f 9 -s)
			
			[[ ${dbpasscustom,,} == "random" ]] && dbpasscustom=`pwgen -s -1 16`
			
			# Check if we have ALL the parameters.
			if [[ $mysql != true && ( -z $setmsqcustom || -z $setpwpcustom || -z $dbhostcustom || -z $dbnamecustom || -z $dbusercustom || -z $dbpasscustom || ( -z $dbprefcustom && -z $mysql && -z $extdata ) || ( -n $exusercustom && -z $expasscustom )) ]]; then
				echo "${red}[ERROR] Missing parameters!${end}"
				exit 1
			fi
			
			if [[ $custombegin == "[" && $customlast == "]" && ((($setmsqcustom == "true" || $setpwpcustom == "true") && -n $dbhostcustom && -n $dbnamecustom && -n $dbusercustom && -n $dbpasscustom && (-n $dbprefcustom || ( -n $mysql && $mysql != true ))) || ($setmsqcustom == "false" && $setpwpcustom == "false")) ]]; then
				[[ -n $mysql && $mysql != true ]] && type="5" || type="3"
			fi
		fi
	fi
fi
[[ $type == [123] || -n $php ]] && check_for_php -ask
[[ $type == [24] ]] && check_for_mysql -ask


# List Sites
if [[ -n $list ]]; then
	echo ""
	for site in "/etc/nginx/sites-available"/*
	do
		domi=$(echo $site | cut -f 5 -d "/")
		if [[ $domi != "default" && $domi != $(conf_read tools-port) ]]; then
			[[ -a /var/www/$domi ]] && sign="${gre} +" || sign="${blu} *${gre}"
			[[ ! -L /etc/nginx/sites-enabled/$domi ]] && sign="${red} -"
			outlist="$sign $domi ${end}"
			
			if [[ $list == "raw" || $raw =~ ^(all|parked|disabled|main|true)$ ]]; then
				outlist="$domi"
				[[ $raw == "parked" && -a /var/www/$domi ]] && outlist=""
				[[ $raw == "disabled" && -L /etc/nginx/sites-enabled/$domi ]] && outlist=""
				[[ $raw == "main" && ( ! -L /etc/nginx/sites-enabled/$domi || ! -a /var/www/$domi ) ]] && outlist=""
			elif [[ -n $raw ]]; then
				echo "${red}[ERROR] Please, enter a valid value for RAW!${end}"
				exit 1
			fi
			
			if [[ -n $outlist ]]; then
				echo "$outlist"
				nonemptylist=true
			fi
		fi
	done
	[[ -z $nonemptylist && -z $raw && $list != "raw" ]] && echo "${blu}[Empty] No sites were found!${end}"
	echo ""
	nginx_not="true" # Nginx-Reload not-needed.

	
# Delete all sites
elif [[ -n $delete_all ]]; then
	api-events_update si7
	echo "${red}"
	echo "All your sites files will be removed."
	echo "This action will only delete Databases attached to a WordPress site, any other Database will not be deleted."
	
	if [[ $delete_all != "force" ]]; then
		echo "${blu}"
		echo "Are you sure [y/N]? ${end}"
		while read -r -n 1 -s answer; do
			answer=${answer:-n}
			echo ""
			[[ $answer = [YyNn] ]] && break
		done
		
		if [[ $answer == [Nn] ]]; then
			echo "${red}Action aborted!${end}"
			exit 1
		fi
	fi
	
	# List all remaining sites (parked and proxy)
	for site in "/etc/nginx/sites-available"/*
	do
		delete="force"
		domain=$(echo $site | cut -f 5 -d "/")
		[[ $domain != "default" && $domain != $(conf_read tools-port) ]] && deletesite
	done
	
	# Delete all files - double check!
	# -rf is necessary to not generate an error when is empty.
	sudo rm -rf /etc/nginx/sites-available/!(default|$(conf_read tools-port))
	sudo rm -rf /etc/nginx/sites-enabled/!(default|$(conf_read tools-port))
	sudo rm -rf /var/www/!(html|$(conf_read tools-port))
	echo ""
	echo "${gre}All sites and data has been deleted successfully!${end}"

	
# Create PHP site
elif [[ -n $php && -n $domain ]]; then
	createsite
	
	
# Create MYSQL site
elif [[ -n $mysql && -n $domain ]]; then
	# We use WP function to create DB when type=0 WP files are not installed.
	createsite
	wpinstall
elif [[ -n $mysql && -z $domain ]]; then
	# Hack to create a DB easily (without site).
	wpinstall


# Create HTML site
elif [[ -n $html && -n $domain ]]; then
	createsite
	sudo sed -i '/index/c \	index  index.html index.htm;' /etc/nginx/sites-available/$domain
	sudo sed -i '/index/a \	location / { try_files $uri $uri/ =404; }' /etc/nginx/sites-available/$domain
	sudo sed -i '/php.conf/d' /etc/nginx/sites-available/$domain


# Create WP site
elif [[ -n $wp && -n $domain ]]; then
	createsite
	sudo sed -i '/locations.conf/i \	include common/wpcommon.conf;' /etc/nginx/sites-available/$domain


# Create WP Multisite (Sub-directory)
elif [[ -n $wpsubdir && -n $domain ]]; then
	createsite
	sudo sed -i '/locations.conf/i \	include common/wpsubdir.conf;' /etc/nginx/sites-available/$domain
	sudo sed -i '/locations.conf/i \	include common/wpcommon.conf;' /etc/nginx/sites-available/$domain

	
# Create WP Multisite (Sub-domain)	
elif [[ -n $wpsubdom && -n $domain ]]; then
	createsite
	sudo sed -i '/locations.conf/i \	include common/wpcommon.conf;' /etc/nginx/sites-available/$domain


# Parked Domain
elif [[ -n $parked && -n $domain ]]; then
	createsite
	[[ $parked != true ]] && mapto=$parked || mapto="NeverMatchAtFirstDotCom"
	
	while [[ ! -a /etc/nginx/sites-available/$mapto ]]
	do
		echo "${blu}"
		read -p "Main site domain: " mapto
		mapto=${mapto:-NeverMatchAtFirstDotCom}
		echo "${end}"
		[[ ! -a /etc/nginx/sites-available/$mapto ]] && echo "${red}Main site domain not found! ${end}"
	done
	
	# Nginx conf file for the new parked domain
	sername=$(grep -w "server_name .*;" /etc/nginx/sites-available/$domain)
	sudo truncate -s 0 /etc/nginx/sites-available/$domain
	sudo cat /etc/nginx/sites-available/$mapto > /etc/nginx/sites-available/$domain
	
	# Prevent if SSL is enabled in main site and ssl data is copied to parked site causing an error.
	sudo site $domain -ssl-off=force > /dev/null 2>&1 &
	
	sudo sed -i "/server_name/c \	$sername" /etc/nginx/sites-available/$domain
	sudo sed -i "s/$mapto/$domain/g"  /etc/nginx/sites-available/$domain
	sudo sed -i "/root/c \	root /var/www/$mapto/htdocs;" /etc/nginx/sites-available/$domain
	cusconl=$( grep -F "include /var/www/$domain/" /etc/nginx/sites-available/$domain | sed "s/$domain/$mapto/" )
	sed -i "/include \/var\/www\/$domain/c \ ${cusconl}" /etc/nginx/sites-available/$domain
	
	echo "${gre}"
	echo "Parked domain was successfully configured! "
	echo "${end}"
	
# Reverse proxy
elif [[ -n $proxy && -n $domain ]]; then
	if [[ $proxy != true ]]; then
		firstchar=$(echo "${proxy}" | cut -c-1)
		lastchar=$(echo "${proxy}" | rev | cut -c-1)
		proxydata=${proxy:1:-1}
		rphost=$(echo "${proxydata}" | cut -d':' -f 1 -s)
		rpport=$(echo "${proxydata}" | cut -d':' -f 2 -s)
		
		if ! [[ -n $proxydata && $firstchar == "[" && $lastchar == "]" && -n $rphost && -n $rpport && $rpport =~ ^[0-9]+$ && $rpport -ge 0 && $rpport -le 65535 ]]; then
			echo "${red}[ERROR] Please, enter a valid host and port!${end}"
			exit 1
		fi
	fi
	
	createsite
	sudo sed -i '/include /d' /etc/nginx/sites-available/$domain
	sudo sed -i '/root /d' /etc/nginx/sites-available/$domain
	sudo sed -i '/index /d' /etc/nginx/sites-available/$domain
	sudo sed -i '/error_log /r /opt/webinoly/templates/template-site-proxy' /etc/nginx/sites-available/$domain
		
	echo "${gre}"
	if [[ -n $rphost ]]; then
		sudo sed -i "s/localhost/$rphost/g"  /etc/nginx/sites-available/$domain
		echo " Custom host found: $rphost"
	else
		echo " Default host: localhost"
	fi
	if [[ -n $rpport ]]; then
		sudo sed -i "s/8080/$rpport/g"  /etc/nginx/sites-available/$domain
		echo " Custom port found: $rpport"
	else
		echo " Default port: 8080"
	fi
	
	# Check host and port
	[[ -z $rphost ]] && rphost="localhost"
	[[ -z $rpport ]] && rpport="8080"
	code=$(wget -t 1 --timeout=5 --server-response --spider ${rphost}:${rpport} 2>&1 | awk '/^  HTTP/{print $2}')
	code="${code##*$'\n'}"
	echo "${red}"
	[[ $code != 200 ]] && echo "[WARNING] Seems like your host/port is not responding!"
	
	echo "${end}"
	
	
# Site disabled	
elif [[ -n $off && ! -L /etc/nginx/sites-enabled/$domain && -a /etc/nginx/sites-available/$domain ]]; then
		echo "${gre}Seems like your site${blu} $domain ${gre}is already disabled!${end}"
elif [[ -n $off && -L /etc/nginx/sites-enabled/$domain ]]; then
	api-events_update si5
	echo "${gre}Site${blu} $domain ${gre}has been successfully disabled!${end}"
	sudo rm /etc/nginx/sites-enabled/$domain

	
# Site re-enabled
elif [[ -n $on && -L /etc/nginx/sites-enabled/$domain ]]; then
	echo "${gre}Site${blu} $domain ${gre}is already enabled!${end}"
elif [[ -n $on && ! -L /etc/nginx/sites-enabled/$domain && -a /etc/nginx/sites-available/$domain ]]; then
	api-events_update si4
	sudo ln -s /etc/nginx/sites-available/$domain /etc/nginx/sites-enabled/$domain
	echo "${gre}Site${blu} $domain ${gre}has been successfully enabled!${end}"

	
# Delete site	
elif [[ -n $delete && -a /etc/nginx/sites-available/$domain ]]; then
	api-events_update si6
	if [[ $domain == "default" || $domain == $(conf_read tools-port) ]]; then
		echo "${red}[ERROR] System sites can not be removed!${end}"
		exit 1
	else
		deletesite
	fi


# SSL (Letsencrypt)
elif [[ $ssl == "renew" && -z $domain ]]; then
		# Post-Hook removed because we always restart nginx at the end of site command
		sudo certbot renew
elif [[ ( -n $ssl_off || $ssl == "off" ) && ! -a /etc/nginx/sites-available/$domain && -a /etc/letsencrypt/live/$domain/cert.pem ]]; then
	echo "${red}[WARNING] SSL Orphan-Cert found and will be revoked automatically!${end}"
	ssl_revoke
elif [[ ( -n $ssl_on || -n $ssl_off || -n $ssl ) && -a /etc/nginx/sites-available/$domain ]]; then
	if [[ -n $ssl_on || $ssl == "on" || $ssl == "force-renewal" ]]; then
		api-events_update si10
		if [[ $(is_ssl $domain) == "true" && $ssl != "force-renewal" ]]; then
			echo "${gre}SSL is already enabled for your site -${blu} $domain ${end}"
		elif [[ -n $ssl_crt || -n $ssl_key ]]; then
			if [[ -a $ssl_crt && -a $ssl_key ]]; then
				ssl_nginx
				echo "${gre}Your Custom SSL Cert have been successfully enabled on your site -${blu} $domain${end}"
			else
				echo "${red}[ERROR] Custom SSL cert files not found! ${end}"
				exit 1
			fi
		elif [[ -n $add_to_wildcard ]]; then
			if [[ $add_to_wildcard == true ]]; then
				echo "${gre}Please, enter a valid Wildcard SSL Domain! ${end}"
				read -p "${blu}Domain: ${end}" add_to_wildcard
				add_to_wildcard=${add_to_wildcard:-NeverMatchDotCom}
			fi
			
			# Check if domain is a subdomain that can be used in the wildcard cert.
			if [[ $domain == *.*."$add_to_wildcard" ]]; then
				echo "${red}[ERROR] Wildcard Certs only support first-level subdomains!${end}"
				exit 1
			elif [[ ! -d /etc/letsencrypt/live/$add_to_wildcard ]]; then
				echo "${red}[ERROR] Wildcard Cert not found!${end}"
				exit 1
			elif [[ $domain == *."$add_to_wildcard" ]]; then
				ssl_nginx
				echo "${gre}Your site ${blu}- $domain -${gre} have been successfully added to the ${blu}- $add_to_wildcard -${gre} wildcard cert.${end}"
			else
				echo "${red}[ERROR] Seems like your site is not a valid subdomain!${end}"
				exit 1
			fi
		else
			site_ssl_on
		fi
	elif [[ -n $ssl_off || $ssl =~ ^(off|off-force)$ ]]; then
		api-events_update si11
		[[ $(is_ssl $domain) == "true" ]] && site_ssl_off || echo "${gre}SSL is already disabled for your site${blu} $domain ${end}"
	else
		echo "${red}[ERROR] Invalid option for SSL command! ${end}"
		exit 1
	fi

# FastCGI Cache disabled
elif [[ ( -n $nocache || ( -n $cache && $cache == "off" )) && -a /etc/nginx/sites-available/$domain ]]; then
	api-events_update si9
	if [[ $(is_wp_cache $domain) == "true" ]]; then
		sudo sed -i '/wpfc.conf/c \	include common/php.conf;' /etc/nginx/sites-available/$domain
		echo "${gre}FastCGI Cache in${blu} $domain ${gre}has been disabled!${end}"
	else
		if [[ $(is_wp $domain) == "false" ]]; then
			echo "${red}[ERROR] Site${blu} $domain ${red}is not a WP site!${end}"
			exit 1
		else
			echo "${gre}FastCGI Cache is already disabled on your site${blu} $domain${end}"
		fi
	fi
	
	
# FastCGI Cache enabled
elif [[ ( -n $cache || $cache == "on" ) && -a /etc/nginx/sites-available/$domain ]]; then
	api-events_update si8
	if [[ $(is_php $domain) == "true" && $(is_wp $domain) == "true" ]]; then
		sudo sed -i '/php.conf/c \	include common/wpfc.conf;' /etc/nginx/sites-available/$domain
		if [[ ! -d /var/www/$domain/htdocs/wp-content/plugins/nginx-helper || ! -d /var/www/$domain/htdocs/wp-content/plugins/redis-cache ]]; then
			echo "${gre}"
			echo "We recommend Nginx Helper Plugin and Redis Object Cache Plugin as an easy way to manage FastCGI and Redis Cache on your WordPress site."
			echo "${blu}Do you want to install it now [Y/n]? ${end}"
			while read -r -n 1 -s answer; do
			  answer=${answer:-y}
			  if [[ $answer = [YyNn] ]]; then
				[[ $answer = [Yy] ]] && wp_cache_plugins
				break
			  fi
			done
		fi
		echo "${gre}"
		echo "FastCGI Cache in${blu} $domain ${gre}has been successfully enabled! "
		echo "${end}"
	else
		if [[ $(is_wp $domain) == "false" ]]; then
			echo "${red}[ERROR] Site${blu} $domain ${red}is not a WP site!${end}"
			exit 1
		else
			echo "${gre}FastCGI Cache is already enabled on your site${blu} $domain${end}"
		fi
	fi


# Force www or non-www redirect (www, root, off)
elif [[ -n $force_redirect && -a /etc/nginx/sites-available/$domain ]]; then
	force_redirect
	
	
# Catch ERROR 
elif [[ -n $domain && ! -a /etc/nginx/sites-available/$domain ]]; then
	echo "${red}[ERROR] Site${blu} $domain ${red}doesn't exists, please enter a valid domain name!${end}"
	exit 1
else
	echo "${red}[ERROR] Please, enter a valid option! ${end}"
	exit 1
fi

shopt -u extglob
[[ $(conf_read nginx) == "true" && -z $nginx_not ]] && sudo service nginx reload
api-events_update sie
