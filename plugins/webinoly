#!/bin/bash

# Webinoly Server Manager Plugin
# Syntax: webinoly <option> <argument>
# Options: -update, -server-reset, -verify, -dbpass, -tools-port, -login-www-data, -config-cache, -uninstall, -info, -external-sources-update, -clear-cache, -version, -blockip, -unblockip, -conf-value_, -yoast-sitemap, -default-site, -tools-site, -mysql-password, -smtp
# Arguments: -raw

source /opt/webinoly/lib/webin
check_for_parameters $@
api-events_update wys

if [[ -n $update ]]; then
	api-events_update wy1
	checkver=$(wget --timeout=10 -t 1 -qO- https://api.webinoly.com/check?text=true)
	currentver=$(conf_read app-version)
	
	if [[ ( -n $checkver && ${checkver//.} -gt ${currentver//.} ) || ( -n $update && $update != true ) ]]; then
		echo ""
		[[ -n $update && $update != true ]] && branch="-ver=${update}" || branch=""
		sudo wget --timeout=15 -t 1 --referer="https://update.webinoly.com/?ver=$(app_version)" -qrO weby https://qrok.es/wyupd && sudo bash weby upd $branch
		[[ $? == 0 ]] && echo "${gre}Webinoly App has been updated successfully!${end}"
	else
		echo "${gre}You currently have the latest version!${end}"
	fi
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $server_reset ]]; then
	api-events_update wy2
	if [[ $server_reset == true ]]; then
		server_reset="all"
	elif ! [[ $server_reset =~ ^(all|nginx|php)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option to update/reset your server configuration!${end}"
		exit 1
	fi
	
	# Regenerate NGINX conf files
	if [[ $(conf_read nginx-optim) == "true" && $server_reset =~ ^(nginx|all)$ ]]; then
		# Backup and keep blockip and whitelist
		sudo cp -p /etc/nginx/conf.d/blockips.conf /tmp/webinoly_blockips_backup
		sudo cp -p /etc/nginx/common/acl.conf /tmp/webinoly_whitelist_backup
		
		sudo rm -rf /etc/nginx/common
		sudo rm -rf /etc/nginx/conf.d/*
		linux_purge
		nginx_optim
		sleep 3
		
		sudo mv /tmp/webinoly_blockips_backup /etc/nginx/conf.d/blockips.conf
		sudo mv /tmp/webinoly_whitelist_backup /etc/nginx/common/acl.conf
		echo "${gre}Nginx settings has been updated successfully!${end}"
	elif [[ $(conf_read nginx-optim) != "true" && $server_reset =~ ^(nginx|all)$ ]]; then
		echo "${red}[ERROR] Nginx settings couldn't been updated, seems like is not installed in your server!${end}"
		err_cont=true
	fi
	
	# Regenerate PHP conf files
	if [[ $(conf_read php-optim) == "true" && $server_reset =~ ^(php|all)$ ]]; then
		if [[ -a /opt/webinoly/templates/source/php.ini && -a /opt/webinoly/templates/source/www.conf ]]; then
			sudo cat /opt/webinoly/templates/source/php.ini > /etc/php/$(conf_read php-ver)/fpm/php.ini
			sudo cat /opt/webinoly/templates/source/www.conf > /etc/php/$(conf_read php-ver)/fpm/pool.d/www.conf
			sudo rm -rf /etc/php/$(conf_read php-ver)/fpm/pool.d/debug.conf
			php_optim
			echo "${gre}PHP settings has been updated successfully!${end}"
		else
			echo "${red}[ERROR] PHP could not been updated, source files not found!${end}"
			exit 1
		fi
	elif [[ $(conf_read php-optim) != "true" && $server_reset =~ ^(nginx|all)$ ]]; then
		echo "${red}[ERROR] PHP settings couldn't been updated, seems like is not installed in your server!${end}"
		exit 1
	fi
	
	
elif [[ -n $verify ]]; then
	webinoly_verify
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $dbpass ]]; then
	if [[ -n $(conf_read mysql-root) || -n $(conf_read mysql-admin) ]]; then
		rpass=$( echo $(conf_read mysql-root) | openssl enc -d -a -salt )
		apass=$( echo $(conf_read mysql-admin) | openssl enc -d -a -salt )
		echo ""
		[[ $dbpass == "raw" || -n $raw ]] && echo "root:$rpass" || echo "${gre}  root: $rpass"
		[[ $dbpass == "raw" || -n $raw ]] && echo "admin:$apass" || echo "  admin: $apass ${end}"
		echo ""
	else
		echo "${red}"
		echo "[ERROR] DB Passwords not found!"
		echo "${end}"
		exit 1
	fi
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $tools_port ]]; then
	oldport="$(conf_read tools-port)"
	[[ $tools_port != true ]] && tools_port $tools_port || tools_port
	newport="$(conf_read tools-port)"
	if [[ $oldport != $newport && $(conf_read nginx-tool) == "true" && $(conf_read nginx) == "true" ]]; then
		sudo mv /var/www/$oldport /var/www/$newport
		sudo mv /etc/nginx/sites-available/$oldport /etc/nginx/sites-available/$newport
		sudo rm /etc/nginx/sites-enabled/$oldport
		sudo ln -s /etc/nginx/sites-available/$newport /etc/nginx/sites-enabled/$newport
		sudo sed -i "s/${oldport}/${newport}/g"  /etc/nginx/sites-available/$newport
	fi


elif [[ -n $tools_site ]]; then
	if [[ -a /etc/nginx/sites-available/$tools_site ]]; then
		# Check for previous assigned domain and remove
		if [[ -n $(conf_read tools-site) ]]; then
			sudo sed -i '/server_name/d' /etc/nginx/sites-available/$(conf_read tools-port)
			# In case SSL is enabled
			sudo sed -i "/listen $(conf_read tools-port)/c \	listen $(conf_read tools-port) default_server deferred;" /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i "/listen \[::\]:$(conf_read tools-port)/c \	listen [::]:$(conf_read tools-port) default_server;" /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i '/headers-https.conf/d' /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i '/WebinolySSLstart/,/WebinolySSLend/{/.*/d}' /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i '/WebinolyToolsStartBlackhole/,/WebinolyToolsEndBlackhole/{/.*/d}' /etc/nginx/sites-available/$(conf_read tools-port)
		fi
		
		# Assign new domain/site
		sername=$(sed -n -e '/WebinolyNginxServerStart/,$p' /etc/nginx/sites-available/$tools_site | grep -F "server_name" | sed -e 's/^[ \t]*//')
		sudo sed -i "/error_log/a \	${sername}" /etc/nginx/sites-available/$(conf_read tools-port)
		sudo sed -i "/listen $(conf_read tools-port)/c \	listen $(conf_read tools-port) deferred;" /etc/nginx/sites-available/$(conf_read tools-port)
		sudo sed -i "/listen \[::\]:$(conf_read tools-port)/c \	listen [::]:$(conf_read tools-port);" /etc/nginx/sites-available/$(conf_read tools-port)
		
		# If SSL is enabled
		isssl=$(sed -n -e '/WebinolyNginxServerStart/,$p' /etc/nginx/sites-available/$tools_site | grep -F "ssl_certificate_key")
		if [[ -n $isssl ]]; then
			sudo sed -i "/listen $(conf_read tools-port)/c \	listen $(conf_read tools-port) ssl http2 deferred;" /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i "/listen \[::\]:$(conf_read tools-port)/c \	listen [::]:$(conf_read tools-port) ssl http2;" /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i '/server_name /r /opt/webinoly/templates/template-site-ssl' /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i "/WebinolySSLstart/,/WebinolySSLend/{s/domain.com/$tools_site/}" /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i '/locations.conf/a \	include common/headers-https.conf;' /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i "/WebinolySSLend/i \	error_page 497  https:\/\/\$host:\$server_port\$request_uri;" /etc/nginx/sites-available/$(conf_read tools-port)
			create_blackhole_cert
		fi
		
		# Default blackhole for requests different from our assigned Tools-Site
		sudo sed -i '/Webinoly Admin-Tools NGINX CONFIGURATION/r /opt/webinoly/templates/general/tools-site-blackhole' /etc/nginx/sites-available/$(conf_read tools-port)
		sudo sed -i "/WebinolyToolsStartBlackhole/,/WebinolyToolsEndBlackhole/{s/22222/$(conf_read tools-port)/}" /etc/nginx/sites-available/$(conf_read tools-port)
		if [[ -z $isssl ]]; then
			sudo sed -i "/WebinolyToolsStartBlackhole/,/WebinolyToolsEndBlackhole/{/ssl_certificate/d}" /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i "/WebinolyToolsStartBlackhole/,/WebinolyToolsEndBlackhole/{/error_page/d}" /etc/nginx/sites-available/$(conf_read tools-port)
			sudo sed -i "/WebinolyToolsStartBlackhole/,/WebinolyToolsEndBlackhole/{s/ssl //}" /etc/nginx/sites-available/$(conf_read tools-port)
			echo "${red}It's highly recommended having an SSL Cert enabled on this site. ${end}"
		fi
		
		conf_write tools-site $tools_site
		echo "${gre}Domain ${blu}- ${tools_site}:$(conf_read tools-port) -${gre} was successfully assigned to access your server tools!${end}"
	else
		echo "${red}[ERROR] Domain/site not found. ${end}"
		exit 1
	fi

	
elif [[ -n $login_www_data || -n $nologin_www_data ]]; then
	check_for_nginx
	if [[ -n $login_www_data && ! $login_www_data =~ ^(on|off|true)$ ]]; then
		echo "${red}[ERROR] Invalid option! ${end}"
		exit 1
	fi
	
	if [[ $login_www_data == true || $login_www_data == "on" ]]; then
		if [[ $(conf_read login-www-data) == "true" ]]; then
			echo "${gre}SFTP access for www-data user is already enabled! ${end}"
			exit 0
		fi
		
		# Allow access for www-data user
		sudo mkdir -p /var/www/.ssh
		sudo chmod 700 /var/www/.ssh
		sudo cat $HOME/.ssh/authorized_keys > /var/www/.ssh/authorized_keys
		sudo chmod 600 /var/www/.ssh/*
		sudo chown -R www-data:www-data /var/www

		# www-data sftp-only access jail - if fails usrlib must be listed in /etc/shells
		sudo usermod -s /usr/lib/openssh/sftp-server www-data
		sudo addgroup --system sftponly
		sudo usermod -G sftponly www-data
		sudo chown root:root /var/www
		sudo sed -i "/Subsystem sftp/c\Subsystem sftp internal-sftp" /etc/ssh/sshd_config
		sudo echo '# WebinolySFTPstart
Match Group sftponly
ChrootDirectory /var/www
X11Forwarding no
AllowTcpForwarding no
ForceCommand internal-sftp
# WebinolySFTPend' >> /etc/ssh/sshd_config

		falus=$( grep -F "AllowUsers" /etc/ssh/sshd_config )
		if [[ -n $falus ]]; then
			sudo sed -i "s/$falus/$falus www-data/" /etc/ssh/sshd_config
		fi

		conf_write login-www-data true
		sudo service ssh restart
		echo "${gre}SFTP access for www-data user has been successfuly enabled! ${end}"
	
	elif [[ $nologin_www_data == true || $login_www_data == "off" ]]; then
		if [[ $(conf_read login-www-data) != "true" ]]; then
			echo "${gre}SFTP access for www-data user is already disabled! ${end}"
			exit 0
		fi
		
		sudo rm -rf /var/www/.ssh
		sudo sed -i '/www-data:/c\www-data:x:33:33:www-data:\/var\/www:\/usr\/sbin\/nologin' /etc/passwd
		sudo gpasswd -d www-data sftponly
		sudo delgroup sftponly
		sudo chown www-data:www-data /var/www
		sudo sed -i "/Subsystem sftp/c\Subsystem sftp \/usr\/lib\/openssh\/sftp-server" /etc/ssh/sshd_config
		sudo sed -i '/WebinolySFTPstart/,/WebinolySFTPstart/{/.*/d}' /etc/ssh/sshd_config
		
		falus=$( grep -F "AllowUsers" /etc/ssh/sshd_config )
		if [[ -n $falus ]]; then
			suffix="www-data"
			foo=${falus%$suffix}
			sudo sed -i "s/$falus/$foo/" /etc/ssh/sshd_config
		fi

		conf_write login-www-data purged
		sudo service ssh restart
		echo "${gre}SFTP access for www-data user has been successfuly disabled! ${end}"
	fi
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $config_cache ]]; then
	if [[ $(conf_read nginx) == "true" ]]; then	
		hitline=$( grep -F "fastcgi_cache_valid 200" /etc/nginx/conf.d/fastcgi.conf )
		hitval=$(echo "${hitline//;}" | rev | cut -d' ' -f 1 | rev)
		inaline=$( grep -F "fastcgi_cache_path" /etc/nginx/conf.d/fastcgi.conf )
		inactive=$(echo "${inaline//;}" | rev | cut -d' ' -f 1 | rev)
		inaval=$(echo "${inactive}" | cut -d'=' -f 2)
		maxsize=$(echo "${inaline}" | rev | cut -d' ' -f 2 | rev)
		othline=$( grep -F "fastcgi_cache_valid 301 302 307 404" /etc/nginx/conf.d/fastcgi.conf )
		othval=$(echo "${othline//;}" | rev | cut -d' ' -f 1 | rev)
	else
		hitval="Not yet defined"
		inaval="Not yet defined"
		othval="Not yet defined"
	fi

	
	if [[ $config_cache == true ]]; then
		echo "${gre}"
		echo "**********************************************************************"
		echo "*************     Set FastCGI Cache new time values     **************"
		echo "*****  Example: 30d = 30days  |  3h = 3hours  |  5m = 5minutes  ******"
		echo "**********************************************************************"
		echo "${blu}"
		echo "FastCGI Cache Valid for Pages (HttpCode: 200) actual value is: $hitval"
		read -p "   Set new value: " hit
		hit=${hit:-$hitval}
		echo ""
		echo "Purge Cache for inactive pages actual value is: $inaval"
		read -p "   Set new value: " ina
		ina=${ina:-$inaval}
		echo ""
		echo "FastCGI Cache Valid for Errors and Redirections (HttpCode: 301, 302, 307, 404) actual value is: $othval"
		read -p "   Set new value: " oth
		oth=${oth:-$othval}
		echo ""
	elif [[ $(echo "${config_cache}" | cut -c-1) == "[" && $(echo "${config_cache}" | rev | cut -c-1) == "]" ]]; then
		custombegin=$(echo "${config_cache}" | cut -c-1)
		customlast=$(echo "${config_cache}" | rev | cut -c-1)
		cachedata=${config_cache:1:-1}
			
		hit=$(echo "${cachedata}" | cut -d',' -f 1 )
		ina=$(echo "${cachedata}" | cut -d',' -f 2 )
		oth=$(echo "${cachedata}" | cut -d',' -f 3 )
	else
		echo "${red}[ERROR] Please enter a valid value!${end}"
		exit 1
	fi
	
	if [[ "$hit" =~ ^[0-9]+[smhdwMy]$ && "$ina" =~ ^[0-9]+[smhdwMy]$ && "$oth" =~ ^[0-9]+[smhdwMy]$ ]]; then
		if [[ $(conf_read nginx) == "true" ]]; then	
			sudo sed -i "/fastcgi_cache_valid 200/c \fastcgi_cache_valid 200 ${hit};" /etc/nginx/conf.d/fastcgi.conf
			sudo sed -i "/fastcgi_cache_valid 301 302 307 404/c \fastcgi_cache_valid 301 302 307 404 ${oth};" /etc/nginx/conf.d/fastcgi.conf
			sudo sed -i "/fastcgi_cache_path/c \fastcgi_cache_path \/var\/run\/nginx-cache levels=1:2 keys_zone=WORDPRESS:50m ${maxsize} inactive=${ina};" /etc/nginx/conf.d/fastcgi.conf
		fi
		conf_write fastcgi-conf ${hit},${ina},${oth}
		echo "${gre}FastCGI Cache values has been successfully updated!${end}"
	else
		echo "${red}[ERROR] Invalid values!${end}"
		exit 1
	fi

	
elif [[ -n $uninstall ]]; then
	api-events_update wy4
	echo "${red}"
	echo "You are about to completely remove Webinoly App from your server!!"
	echo "${blu}Are you sure [y/N]? "
	while read -r -n 1 -s answer; do
	  answer=${answer:-n}
	  echo ""
	  if [[ $answer = [YyNn] ]]; then
		if [[ $answer == [Yy] ]]; then
			sudo mv /opt/webinoly/webinoly.conf $HOME/.webinoly-conf-restore_dont-remove
			sudo rm -rf /opt/webinoly
			sudo rm /usr/bin/webinoly
			sudo rm /usr/bin/stack
			sudo rm /usr/bin/site
			sudo rm /usr/bin/httpauth
			sudo rm /usr/bin/log			
			echo "${gre}Webinoly App has been removed successfully from your server!${end}"
			exit 0
		else
			echo "${gre}Action aborted!${end}"
		fi
		break
	  fi
	done
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $info ]]; then
	system_info
	nginx_not="true" # Nginx-Reload not-needed.

	
elif [[ -n $external_sources_update ]]; then
	echo "${blu}- Downloading Public Suffix List!${end}"
	sudo wget --timeout=15 -t 1 -qrO /tmp/temp-public_suffix_list.dat https://publicsuffix.org/list/public_suffix_list.dat
	if [[ -s /tmp/temp-public_suffix_list.dat ]]; then
		echo "${blu}- Processing file!${end}"
		sudo sed -i '/^\/\// d' /tmp/temp-public_suffix_list.dat
		sudo sed -i '/^$/d' /tmp/temp-public_suffix_list.dat
		sudo sed -i 's/[!]\+//g' /tmp/temp-public_suffix_list.dat
		sudo sed -i 's/^\*\.\+//g' /tmp/temp-public_suffix_list.dat
		sudo mv /tmp/temp-public_suffix_list.dat /opt/webinoly/lib/public_suffix_list.dat
		echo "${gre}Domain list has been successfully updated!${end}"
	else
		echo "${red}[ERROR] Domain list not updated!${end}"
		err_cont=true
	fi
	
	echo ""
	echo "${blu}- Downloading Timezone Database!${end}"
	sudo wget --timeout=15 -t 1 -qrO /tmp/timezonedb.tgz https://pecl.php.net/get/timezonedb
	if [[ -s /tmp/timezonedb.tgz ]]; then
		echo "${blu}- Processing file!${end}"
		sudo tar -xf /tmp/timezonedb.tgz -C /tmp/ --wildcards --no-anchored timezonedb-*/timezonedb.h --strip-components=1
		sudo sed -i '/^\t{.*},$/!d' /tmp/timezonedb.h
		sudo cut -d'"' -f2 /tmp/timezonedb.h > /opt/webinoly/lib/timezone.dat
		sudo rm /tmp/timezonedb.*
		echo "${gre}Timezone Database has been successfully updated!${end}"
	else
		echo "${red}[ERROR] Timezone Database not updated!${end}"
		exit 1
	fi
	nginx_not="true" # Nginx-Reload not-needed.
	
	
elif [[ -n $clear_cache ]]; then
	api-events_update wy3
	[[ $clear_cache == true ]] && clear_cache="all"
	if ! [[ $clear_cache =~ ^(redis|memcache|memcached|opcache|fastcgi|all)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option!${end}"
		exit 1
	fi
	if [[ $clear_cache =~ ^(redis|all)$ ]]; then
		if [[ $(conf_read php-tool) == "true" && -a /etc/redis/redis.conf ]]; then
			sudo redis-cli flushall
			echo "${gre}- Redis Cache has been successfully cleared!${end}"
		else
			echo "${red}[ERROR] We can not clear Redis Cache because is not installed!${end}"
			err_cont=true
		fi
	fi
	if [[ $clear_cache =~ ^(memcache|memcached|all)$ ]]; then
		if [[ $(conf_read php-tool) == "true" && -a /etc/memcached.conf ]]; then
			memhost=$(grep ^-l /etc/memcached.conf | cut -f 2 -d ' ')
			memport=$(grep ^-p /etc/memcached.conf | cut -f 2 -d ' ')
			echo flush_all > /dev/tcp/$memhost/$memport
			echo "${gre}- Memcached has been successfully cleared!${end}"
		else
			echo "${red}[ERROR] We can not clear Memcache because is not installed!${end}"
			err_cont=true
		fi
	fi
	if [[ $clear_cache =~ ^(opcache|all)$ ]]; then
		if [[ $(conf_read nginx-tool) == "true" && $(conf_read php-tool) == "true" ]]; then
			port=$(conf_read tools-port)
			if [[ ! -a /var/www/$port/htdocs/php/opcache/index.php ]]; then
				sudo mkdir /var/www/$port/htdocs/php/opcache
				sudo touch /var/www/$port/htdocs/php/opcache/index.php
				echo '<?php opcache_reset(); echo "OK\n";' > /var/www/$port/htdocs/php/opcache/index.php
				sudo chown -R www-data:www-data /var/www/$port/htdocs/php/opcache
				sudo chmod 644 /var/www/$port/htdocs/php/opcache/index.php
			fi
			wget --spider --no-check-certificate --timeout=15 -t 1 localhost:$port/php/opcache/  > /dev/null 2>&1 &
			echo "${gre}- OpCache has been successfully cleared!${end}"
		else
			echo "${red}[ERROR] We can not clear OpCache because PHP or NGINX are not installed!${end}"
			err_cont=true
		fi
	fi
	if [[ $clear_cache =~ ^(fastcgi|all)$ ]]; then
		if [[ $(conf_read nginx) == "true" ]]; then
			sudo rm -Rf /var/run/nginx-cache/*
			echo "${gre}- FastCgi Cache has been successfully cleared!${end}"
		else	
			echo "${red}[ERROR] We can not clear FastCGI Cache because NGINX is not installed!${end}"
			err_cont=true
		fi
	fi
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $timezone ]]; then
	if [[ $timezone == true ]]; then
		echo "${gre}"
		echo "Please, enter a valid Timezone for Ubuntu and PHP."
		echo "http://php.net/manual/en/timezones.php"
		echo ""
		read -p "${blu} Timezone: ${end}" timezone
		echo ""
	fi
	conf_write timezone $timezone
	set_timezone
	nginx_not="true" # Nginx-Reload not-needed.
	

elif [[ -n $version || -n $v || -n $V ]]; then
	[[ -z $(conf_read server-version) ]] && sver="Not installed!" || sver=$(conf_read server-version)
	
	echo "${blu}"
	echo "Webinoly version: $(app_version)"
	echo "Current stack version: $sver"
	[[ $sver != $(svr_version) ]] && echo "Available stack version: $(svr_version)"
	echo "${end}"
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $blockip ]]; then
	if [[ -a /etc/nginx/conf.d/blockips.conf ]]; then
		if [[ -n $list ]]; then
			[[ $list == "raw" || -n $raw ]] && echo "" || echo "${blu}"
			sudo sed -n 's/^deny //p;' /etc/nginx/conf.d/blockips.conf | sudo sed -n 's/;$//p'
			[[ $list == "raw" || -n $raw ]] && echo "" || echo "${end}"
		else
			[[ $blockip == true ]] && read -p "${blu}IP address to block: ${end}" blockip
			if [[ $(ip_check $blockip) == "true" ]]; then
				exist=$( grep -E "^deny $blockip;$" /etc/nginx/conf.d/blockips.conf )
				if [[ -z $exist ]]; then
					sh -c "echo -n 'deny $blockip;\n' >> /etc/nginx/conf.d/blockips.conf"
					echo "${gre}The IP address ${blu}'$blockip'${gre} was successfully blocked!${end}"
				else
					echo "${gre}IP '$blockip' is already blocked!${end}"
					exit 0
				fi
			else	
				echo "${red}[ERROR] Please, enter a valid IP value!${end}"
				exit 1
			fi
		fi
	else
		echo "${red}[ERROR] Nginx file not found!${end}"
		exit 1
	fi


elif [[ -n $unblockip ]]; then
	if [[ -a /etc/nginx/conf.d/blockips.conf ]]; then
		[[ $unblockip == true ]] && read -p "${blu}IP address to unblock: ${end}" unblockip
		if [[ $(ip_check $unblockip) == "true" ]]; then
			# https://stackoverflow.com/questions/1797906/delete-using-a-different-delimiter-with-sed
			sed -i "\#^deny ${unblockip};#d" /etc/nginx/conf.d/blockips.conf
			echo "${gre}The IP address ${blu}'$unblockip'${gre} was successfully unblocked!${end}"
		else
			echo "${red}[ERROR] Please, enter a valid IP value!${end}"
			exit 1
		fi
	else
		echo "${red}[ERROR] Nginx file not found!${end}"
		exit 1
	fi
	

elif [[ -n $conf_value ]]; then
	if [[ -n $dyn_var && $dyn_var =~ ^[A-Za-z\-]+$ ]]; then
		[[ $conf_value == "NeverMatchString" ]] && read -p "${blu}Enter a value for '${dyn_var}': ${end}" conf_value
		if [[ -n $conf_value ]]; then
			conf_write $dyn_var $conf_value
			echo "${gre}Configuration successfully updated!${end}"
		else
			echo "${red}[ERROR] Please, enter a valid value!${end}"
			exit 1
		fi
	else
		echo "${red}[ERROR] Please, enter a valid variable name!${end}"
		exit 1
	fi
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $yoast_sitemap ]]; then
	[[ $(conf_read nginx) == "true" ]] && ystmap=$( grep -F "# YoastSitemapStart - Yoast SEO Plugin" /etc/nginx/common/wpcommon.conf )
	if [[ $yoast_sitemap == "on" ]]; then
		if [[ -z $ystmap ]]; then
			[[ $(conf_read nginx) == "true" ]] && sudo cat /opt/webinoly/templates/template-yoast-sitemap >> /etc/nginx/common/wpcommon.conf
			conf_write yoast-sitemap true
			echo "${gre}Yoast Sitemap Support was successfully enabled!${end}"
		else
			echo "${gre}Yoast Sitemap Support is already enabled!${end}"
		fi
	elif [[ $yoast_sitemap == "off" ]]; then
		if [[ -n $ystmap || ( -z $ystmap && $(conf_read nginx) != "true" ) ]]; then
			[[ $(conf_read nginx) == "true" ]] && sudo sed -i '/YoastSitemapStart/,/YoastSitemapEnd/{/.*/d}' /etc/nginx/common/wpcommon.conf
			conf_write yoast-sitemap purged
			echo "${gre}Yoast Sitemap Support was successfully disabled!${end}"
		else
			echo "${gre}Yoast Sitemap Support is already disabled!${end}"
		fi
	else
		echo "${red}[ERROR] Please, enter a valid option to enable/disable Yoast Sitemap Support!${end}"
		exit 1
	fi


elif [[ -n $default_site ]]; then
	check_for_nginx
	if [[ $default_site == "default" ]]; then
		if [[ -a /opt/webinoly/templates/source/default ]]; then
			sudo cat /opt/webinoly/templates/source/default >| /etc/nginx/sites-available/default
			remove_domain_default_site
			conf_write default-site default
			echo "${gre}Default Nginx was successfully assigned as default site!${end}"
		else
			echo "${red}[ERROR] Nginx Default file backup not found! ${end}"
			exit 1
		fi
	elif [[ $default_site == "blackhole" ]]; then
		sudo cat /opt/webinoly/templates/general/nginx-blackhole >| /etc/nginx/sites-available/default
		remove_domain_default_site
		create_blackhole_cert
		conf_write default-site blackhole
		echo "${gre}Blackhole Nginx site was successfully assigned as default site!${end}"
	else
		# Domain option
		if [[ -L /etc/nginx/sites-enabled/$default_site ]]; then
			remove_domain_default_site
			sudo sed -i "s/listen 80;/listen 80 default_server;/" /etc/nginx/sites-available/$default_site
			sudo sed -i "s/listen \[::\]:80;/listen [::]:80 default_server;/" /etc/nginx/sites-available/$default_site
			sudo sed -i '/WebinolyNginxServerStart/,/WebinolyNginxServerEnd/{s/listen 443 ssl http2;/listen 443 ssl http2 default_server;/}' /etc/nginx/sites-available/$default_site
			sudo sed -i '/WebinolyNginxServerStart/,/WebinolyNginxServerEnd/{s/listen \[::\]:443 ssl http2;/listen [::]:443 ssl http2 default_server;/}' /etc/nginx/sites-available/$default_site
			
			# If default site is Non-SSL, we need add a blackhole for port 443.
			isssl=$(sed -n -e '/WebinolyNginxServerStart/,$p' /etc/nginx/sites-available/$default_site | grep -F "ssl_certificate_key")
			if [[ -z $isssl ]]; then
				create_blackhole_cert
				sudo sed -i '1r /opt/webinoly/templates/general/nginx-blackhole' /etc/nginx/sites-available/$default_site
				sudo sed -i '/NonSSL/,/NonSSLend/{/.*/d}' /etc/nginx/sites-available/$default_site
			fi
			
			sudo rm -rf /etc/nginx/sites-enabled/default
			conf_write default-site $default_site
			echo "${gre}Site ${blu}- ${default_site} -${gre} was successfully assigned as default site!${end}"
		else
			[[ -a /etc/nginx/sites-available/$default_site ]] && echo "${red}Site found but is disabled.${end}"
			echo "${red}[ERROR] Please, enter a valid option (default, blackhole or domain.com). ${end}"
			exit 1
		fi
	fi
	
	
elif [[ -n $mysql_password ]]; then
	if [[ $(conf_read mysql) != "true" ]]; then
		echo "${red}[ERROR] Seems like MySQL is not installed!${end}"
		exit 1
	fi
	mysql_change_password
	nginx_not="true" # Nginx-Reload not-needed.


elif [[ -n $smtp && -n $purge ]]; then
	if [[ $(conf_read smtp) != "true" ]]; then
		echo "${red}[ERROR] SMTP configuration not found!${end}"
		exit 1
	fi
	if [[ $(conf_read php-tool) != "true" ]]; then
		echo "${red}[ERROR] Seems like PHP and Postfix are not installed!${end}"
		exit 1
	fi
	
	sudo cat /opt/webinoly/templates/source/main.cf >| /etc/postfix/main.cf
	rm -rf /etc/postfix/sasl_passwd.db
	rm -rf /etc/postfix/sasl_passwd
	rm -rf /etc/mailname
	conf_write smtp purged
	sudo service postfix restart
elif [[ -n $smtp ]]; then
	if [[ $(conf_read php-tool) != "true" ]]; then
		echo "${red}[ERROR] Seems like PHP and Postfix are not installed!${end}"
		exit 1
	fi
	if [[ $(conf_read smtp) == "true" ]]; then
		echo "${gre}SMTP is already configured!${end}"
		exit 0
	fi
	smtp_setup
	nginx_not="true" # Nginx-Reload not-needed.


else
	echo "${red}[ERROR] Please enter a valid option!${end}"
	exit 1
fi

[[ -n $err_cont ]] && exit 1
[[ $(conf_read nginx) == "true" && -z $nginx_not ]] && sudo service nginx reload
api-events_update wye
